// Code generated by MockGen. DO NOT EDIT.
// Source: http.go

// Package mock3 is a generated GoMock package.
package mock3

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserInfo is a mock of UserInfo interface
type MockUserInfo struct {
	ctrl     *gomock.Controller
	recorder *MockUserInfoMockRecorder
}

// MockUserInfoMockRecorder is the mock recorder for MockUserInfo
type MockUserInfoMockRecorder struct {
	mock *MockUserInfo
}

// NewMockUserInfo creates a new mock instance
func NewMockUserInfo(ctrl *gomock.Controller) *MockUserInfo {
	mock := &MockUserInfo{ctrl: ctrl}
	mock.recorder = &MockUserInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserInfo) EXPECT() *MockUserInfoMockRecorder {
	return m.recorder
}

// MockUser is a mock of User interface
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Login mocks base method
func (m *MockUser) Login(id int) (UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", id)
	ret0, _ := ret[0].(UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockUserMockRecorder) Login(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUser)(nil).Login), id)
}
